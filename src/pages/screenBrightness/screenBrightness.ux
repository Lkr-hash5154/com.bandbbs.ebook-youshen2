<import name="number" src="../../components/number_choose/number_choose"></import>
<template>
	<div class="page" style="flex-direction: column;">
		<div class="item">
			<text style="font-size: 24px;font-weight:bold;color: rgba(255, 255, 255, 0.6);text-align: center;margin-bottom:40px;top: 30px;">跟随系统亮度</text>
			<img static src="/common/images/Switch_ON.png" style="width: 113px;height: 80px;" @click="toggleFollowSystem" if="{{followSystem}}"/>
			<img static src="/common/images/Switch_OFF.png" style="width: 113px;height: 80px;" @click="toggleFollowSystem" else/>
			<text style="font-size: 36px;font-weight:bold;color: white;width: 100%;text-align: center;">
				{{followSystem ? 'ON' : 'OFF'}}
			</text>
		</div>

		<number show="{{!followSystem}}" style="position: absolute; bottom: 6px" max="255" min="10" step="1" unit="" value="{{brightnessValue}}" @change="change" name="自定义亮度">
		</number>

		<img static src="/common/images/back.png" @click="back" style="position: absolute;left: 6px;top: 6px;width: 72px;height: 72px;"/>
		<text style="position: absolute;left: 78px;top: 7px;width: 180px;line-height: 32px;font-weight:bold;font-size:24px;color:rgba(255,255,255,0.6);text-align:center;">
		  {{nowTime}}
		</text>
		<text style="position: absolute;left: 78px;top: 35px;width: 180px;line-height: 42px;font-weight:bold;font-size:32px;color:white;text-align:center;">
			屏幕亮度
		</text>
	</div>
</template>

<script>
import router from "@system.router";
import storage from '../../common/storage.js';
import brightness from '@system.brightness';

const BRIGHTNESS_KEY = "EBOOK_BRIGHTNESS";
const FOLLOW_SYSTEM_KEY = "EBOOK_BRIGHTNESS_FOLLOW_SYSTEM";
const DEFAULT_BRIGHTNESS = 128;

export default {
	private: {
		brightnessValue: DEFAULT_BRIGHTNESS,
		followSystem: true,
		nowTime: "00:00",
		timer: null
	},
	updateTime() {
		const date = new Date();
		let hours = date.getHours();
		let minutes = date.getMinutes();
		hours = hours < 10 ? '0' + hours : hours;
		minutes = minutes < 10 ? '0' + minutes : minutes;
		this.nowTime = `${hours}:${minutes}`;
	},
	onInit() {
		this.updateTime();
		this.timer = setInterval(() => {
			this.updateTime();
		}, 1000);

		storage.get({
            key: FOLLOW_SYSTEM_KEY,
            success: (data) => {
                this.followSystem = data !== 'false';
            },
            fail: () => {
                this.followSystem = true;
            }
        });

		storage.get({
			key: BRIGHTNESS_KEY,
			success: (data) => {
				if (data) {
					this.brightnessValue = parseInt(data);
				}
			},
		});
	},
	onDestroy(){
	  clearInterval(this.timer);
	},
    toggleFollowSystem() {
        this.followSystem = !this.followSystem;
        if (this.followSystem) {
            brightness.setMode({ mode: brightness.AUTO_MODE });
            storage.set({
                key: FOLLOW_SYSTEM_KEY,
                value: 'true'
            });
        } else {
            brightness.setMode({ mode: brightness.MANUAL_MODE });
            brightness.setValue({ value: this.brightnessValue });
            storage.set({
                key: FOLLOW_SYSTEM_KEY,
                value: 'false'
            });
        }
    },
	change(e) {
		this.brightnessValue = e.detail.value;
        brightness.setMode({ mode: brightness.MANUAL_MODE });
        brightness.setValue({ value: this.brightnessValue });
		storage.set({
			key: BRIGHTNESS_KEY,
			value: this.brightnessValue.toString(),
		});
	},
	back() {
		router.back();
	},
};
</script>

<style>
.page {
	width: 336px;
	height: 480px;
	background-color: #000000;
}

.item {
	position: absolute;
	left: 6px;
	top: 86px;
	width: 324px;
	height: 308px;
	border-radius: 36px;
	flex-direction: column;
	border: 3px solid #262626;
	align-items: center;
	justify-content: flex-start;
	padding: 20px;
}
</style>
