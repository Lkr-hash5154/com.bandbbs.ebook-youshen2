<template>
  <div class="page">
    <list class="list">
      <list-item for="{{visibleChapters}}" class="item" @click="selectChapter($item)" type="chapter">
        <div class="chapter-info">
            <text class="itemtext {{currentChapterIndex == $item.index ? 'itemtext-current' : ''}}">{{$item.name}}</text>
            <text class="itemtext2">{{$item.wordCount}} 字</text>
        </div>
      </list-item>
      <list-item type="pagination" class="pagination-container" if="{{totalPages > 1}}">
        <div class="pagination-controls">
          <img src="/common/images/pre.png" if="{{currentPage > 0}}" @click="prevPage" class="pagination-button"/>
          <text class="pagination-text">{{currentPage + 1}} / {{totalPages}}</text>
          <img src="/common/images/next.png" if="{{currentPage < totalPages - 1}}" @click="nextPage" class="pagination-button"/>
        </div>
      </list-item>
    </list>

    <img static src="/common/images/hd.png" style="position: absolute;left: 0px;top: 0px;width: 336px;height: 102px;" />
    <img static src="/common/images/back.png" @click="back" style="position: absolute;left: 6px;top: 6px;width: 72px;height: 72px;"/>
    <text style="position: absolute;left: 78px;top: 7px;width: 180px;line-height: 32px;font-weight:bold;font-size:24px;color:rgba(255,255,255,0.6);text-align:center;">
      {{nowTime}}
    </text>
    <marquee scrollamount="12" style="position: absolute;left: 78px;top: 35px;width: 180px;line-height: 42px;font-weight:bold;font-size:32px;color:white;text-align:center;">
      {{bookTitle}}
    </marquee>
  </div>
</template>

<script>
import router from '@system.router';
import file from '@system.file';
import prompt from '@system.prompt';
import bookStorage from '../../common/bookStorage.js';
import chapterManager from '../../common/chapterManager.js';

const PAGE_SIZE = 8;

export default {
  private: {
    visibleChapters: [],
    currentPage: 0,
    totalPages: 1,
    totalChapters: 0,
    currentChapterIndex: -1,
    nowTime: "00:00",
    timer: null,
    bookTitle: "",
    loading: false
  },
  protected: {
    name: ''
  },
  updateTime() {
    const date = new Date();
    let hours = date.getHours();
    let minutes = date.getMinutes();
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    this.nowTime = `${hours}:${minutes}`;
  },
  onInit() {
    this.updateTime();
    this.timer = setInterval(() => { this.updateTime(); }, 1000);
    this.loadBookInfo();
    this.loadChapterList();
  },
  onDestroy() {
    if (this.timer) {
      clearInterval(this.timer);
      this.timer = null;
    }
    
    this.visibleChapters = null;
  },
  loadBookInfo() {
    const that = this;
    const bookInfoUri = `internal://files/books/${this.name}/book_info.json`;
    file.readText({
      uri: bookInfoUri,
      success: function(data) {
        try {
          const bookInfo = JSON.parse(data.text);
          that.bookTitle = bookInfo.name;
        } catch (e) {
          that.bookTitle = that.name;
        }
      },
      fail: function() {
        that.bookTitle = that.name;
      }
    });
  },
  async loadChapterList() {
    if (this.loading) return;
    this.loading = true;
    
    try {
      
      const progress = await bookStorage.get(this.name);
      if (progress.chapterIndex !== null) {
        this.currentChapterIndex = progress.chapterIndex;
      }
      
      
      const allChapters = await chapterManager.loadChapterList(this.name);
      this.totalChapters = allChapters.length;
      
      
      this.totalPages = Math.ceil(allChapters.length / PAGE_SIZE) || 1;
      if (this.currentChapterIndex >= 0) {
        
        const currentIndex = allChapters.findIndex(ch => ch.index === this.currentChapterIndex);
        if (currentIndex >= 0) {
          this.currentPage = Math.floor(currentIndex / PAGE_SIZE);
        } else {
          this.currentPage = 0;
        }
      } else {
        this.currentPage = 0;
      }
      
      
      if (this.currentPage >= this.totalPages) {
        this.currentPage = this.totalPages - 1;
      }
      if (this.currentPage < 0) {
        this.currentPage = 0;
      }
      
      
      const start = this.currentPage * PAGE_SIZE;
      const end = start + PAGE_SIZE;
      this.visibleChapters = allChapters.slice(start, end);
    } catch (error) {
      prompt.showToast({ message: `章节列表加载失败` });
      this.visibleChapters = [];
      this.totalPages = 1;
    } finally {
      this.loading = false;
    }
  },
  async loadPage(page) {
    if (this.loading) return;
    
    
    try {
      const result = await chapterManager.getChapterPage(this.name, page, PAGE_SIZE);
      this.visibleChapters = result.chapters;
      this.currentPage = result.currentPage;
      this.totalPages = result.totalPages;
      this.totalChapters = result.totalChapters;
    } catch (error) {
      prompt.showToast({ message: '加载失败' });
    }
  },
  prevPage() {
    if (this.currentPage > 0) {
        this.loadPage(this.currentPage - 1);
    }
  },
  nextPage() {
    if (this.currentPage < this.totalPages - 1) {
        this.loadPage(this.currentPage + 1);
    }
  },
  selectChapter(chapter) {
    globalThis.justJumpedFromChapter = true;
    globalThis.newChapterIndex = chapter.index;
    globalThis.newChapterName = chapter.name;
    router.back();
  },
  back() {
    router.back();
  }
}
</script>

<style>
.page {
    width: 336px;
    height: 480px;
    background-color: #000000;
}
.list {
    width: 336px;
    height: 480px;
    position: absolute;
    top: 0px;
    left: 0px;
    padding: 86px 6px;
}
.item {
    width: 100%;
    height: 180px;
    padding: 16px 20px;
    margin-bottom: 8px;
    background-color: #262626;
    border-radius: 36px;
    align-items: center;
}
.chapter-info {
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  flex: 1;
  width: 100%;
}
.itemtext {
    font-size: 32px;
    line-height: 42px;
    width: 100%;
    font-weight: bold;
    color: white;
    text-overflow: ellipsis;
    lines: 3;
    margin-bottom: 6px;
}
.itemtext-current {
  color: #0D6EFF;
}
.itemtext2 {
    font-size: 24px;
    line-height: 30px;
    font-weight: bold;
    color: rgba(255,255,255,0.6);
    text-overflow: ellipsis;
    lines: 1;
}
.pagination-container {
    width: 100%;
    height: 80px;
    justify-content: center;
    align-items: center;
}
.pagination-controls {
    width: 100%;
    flex-direction: row;
    align-items: center;
    justify-content: space-around;
    padding: 0 8px;
}
.pagination-button {
    width: 72px;
    height: 72px;
}
.pagination-text {
    font-size: 28px;
    font-weight: bold;
    color: white;
}
</style>
