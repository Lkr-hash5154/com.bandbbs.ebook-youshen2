<import name="input-method" src="../../components/InputMethod/InputMethod.ux"></import>
<template>
    <div class="page">
        <img static src="/common/images/mask_up.png" style="position: absolute;left: 0px;top: 0px;width: 192px;height: 118px;" />
        <img static src="/common/images/back.png" @click="back" style="position: absolute;left: 45px;top: 6px;width: 102px;height: 72px;"/>
        <img static src="/common/images/conform.png" @click="save" style="position: absolute;left: 45px;top: 412px;width: 102px;height: 72px;"/>
        <text style="position: absolute;left: 78px;top: 35px;width: 180px;line-height: 42px;font-weight:bold;font-size:32px;color:white;text-align:center;">
            编辑名称
        </text>

        <div class="input-container">
            <div class="input-display" @click="toggleKeyboard">
                <text class="input-label">书签名称</text>
                <div class="input-field">
                    <text class="input-text" if="{{textValue}}">{{textValue}}</text>
                    <text class="input-placeholder" if="{{!textValue}}">请输入书签名称</text>
                    <span class="cursor" if="{{!hideKeyboard}}"></span>
                </div>
            </div>
            <div class="input-counter">
                <text class="counter-text">{{textValue.length}} / 20</text>
            </div>
        </div>

        <input-method
            hide="{{hideKeyboard}}"
            keyboardtype="QWERTY"
            vibratemode="short"
            screentype="rect"
            @complete="onInput"
            @delete="onDelete"
            @visibilityChange="onVisibilityChange" />
    </div>
</template>

<script>
import router from '@system.router'
import prompt from '@system.prompt'
import bookStorage from '../../common/bookStorage.js'

export default {
    private: {
        textValue: "",
        hideKeyboard: true,
    },
    protected: {
        bookName: '',
        bookmarkIndex: -1,
        currentName: ''
    },
    onInit() {
        this.textValue = this.currentName || '';
    },
    onInput(evt) {
        if (this.textValue.length < 20) {
            this.textValue += evt.detail.content;
        }
    },
    onDelete() {
        this.textValue = this.textValue.slice(0, -1);
    },
    onVisibilityChange(evt) {
        if (!evt.detail.visible) {
            this.hideKeyboard = true;
        }
    },
    toggleKeyboard() {
        this.hideKeyboard = !this.hideKeyboard;
    },
    back() {
        router.back();
    },
    async save() {
        if (!this.textValue) {
            prompt.showToast({ message: '名称不能为空' });
            return;
        }

        try {
            const progress = await bookStorage.get(this.bookName);
            if (progress.bookmarks && progress.bookmarks[this.bookmarkIndex]) {
                progress.bookmarks[this.bookmarkIndex].name = this.textValue;
                await bookStorage.set(this.bookName, progress);
                prompt.showToast({ message: '保存成功' });
                router.back();
            } else {
                prompt.showToast({ message: '找不到书签' });
            }
        } catch (e) {
            prompt.showToast({ message: '保存失败' });
        }
    }
}
</script>

<style>
.page {
    width: 192px;
    height: 490px;
    background-color: #000000;
    flex-direction: column;
}
.input-container {
    position: absolute;
    top: 100px;
    left: 20px;
    width: 152px;
    flex-direction: column;
}
.input-display {
    width: 100%;
    padding: 20px 24px;
    background-color: #1a1a1a;
    border-radius: 16px;
    border: 2px solid #333333;
    flex-direction: column;
}
.input-label {
    font-size: 24px;
    font-weight: bold;
    color: rgba(255, 255, 255, 0.6);
    line-height: 32px;
    margin-bottom: 8px;
}
.input-field {
    width: 100%;
    min-height: 44px;
    flex-direction: row;
    align-items: center;
}
.input-text {
    font-size: 32px;
    font-weight: bold;
    color: #FFFFFF;
    line-height: 44px;
}
.input-placeholder {
    font-size: 32px;
    color: rgba(255, 255, 255, 0.3);
    line-height: 44px;
}
.input-counter {
    width: 100%;
    padding: 8px 4px 0 4px;
    align-items: flex-end;
}
.counter-text {
    font-size: 22px;
    color: rgba(255, 255, 255, 0.5);
    line-height: 28px;
}
.cursor {
    width: 3px;
    height: 36px;
    margin-left: 2px;
    background-color: #FFFFFF;
    border-radius: 2px;
    animation-name: blink;
    animation-duration: 1s;
    animation-iteration-count: infinite;
}
@keyframes blink {
    0% { opacity: 1; }
    50% { opacity: 0; }
    100% { opacity: 1; }
}
</style>
