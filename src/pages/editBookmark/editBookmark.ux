<import name="input-method" src="../../components/InputMethod/InputMethod.ux"></import>
<template>
    <div class="page">
        <img static src="/common/images/hd.png" style="position: absolute;left: 0px;top: 0px;width: 336px;height: 102px;" />
        <img static src="/common/images/back.png" @click="back" style="position: absolute;left: 6px;top: 6px;width: 72px;height: 72px;"/>
        <img static src="/common/images/conform.png" @click="save" style="position: absolute;left: 258px;top: 6px;width: 72px;height: 72px;"/>
        <text style="position: absolute;left: 78px;top: 35px;width: 180px;line-height: 42px;font-weight:bold;font-size:32px;color:white;text-align:center;">
            编辑名称
        </text>

        <div class="input-display" @click="toggleKeyboard">
            <text class="input-text">{{textValue}}</text>
            <span class="cursor" if="{{!hideKeyboard}}"></span>
        </div>

        <input-method
            hide="{{hideKeyboard}}"
            keyboardtype="QWERTY"
            vibratemode="short"
            screentype="rect"
            @complete="onInput"
            @delete="onDelete"
            @visibilityChange="onVisibilityChange" />
    </div>
</template>

<script>
import router from '@system.router'
import prompt from '@system.prompt'
import bookStorage from '../../common/bookStorage.js'

export default {
    private: {
        textValue: "",
        hideKeyboard: true,
    },
    protected: {
        bookName: '',
        bookmarkIndex: -1,
        currentName: ''
    },
    onInit() {
        this.textValue = this.currentName || '';
    },
    onInput(evt) {
        if (this.textValue.length < 20) {
            this.textValue += evt.detail.content;
        }
    },
    onDelete() {
        this.textValue = this.textValue.slice(0, -1);
    },
    onVisibilityChange(evt) {
        if (!evt.detail.visible) {
            this.hideKeyboard = true;
        }
    },
    toggleKeyboard() {
        this.hideKeyboard = !this.hideKeyboard;
    },
    back() {
        router.back();
    },
    async save() {
        if (!this.textValue) {
            prompt.showToast({ message: '名称不能为空' });
            return;
        }

        try {
            const progress = await bookStorage.get(this.bookName);
            if (progress.bookmarks && progress.bookmarks[this.bookmarkIndex]) {
                progress.bookmarks[this.bookmarkIndex].name = this.textValue;
                await bookStorage.set(this.bookName, progress);
                prompt.showToast({ message: '保存成功' });
                router.back();
            } else {
                prompt.showToast({ message: '找不到书签' });
            }
        } catch (e) {
            prompt.showToast({ message: '保存失败' });
        }
    }
}
</script>

<style>
.page {
    width: 336px;
    height: 480px;
    background-color: #000000;
    flex-direction: column;
}
.input-display {
    position: absolute;
    top: 150px;
    left: 20px;
    width: 296px;
    height: 60px;
    border-bottom: 2px solid #FFFFFF;
    justify-content: flex-start;
    align-items: center;
}
.input-text {
    font-size: 32px;
    color: #FFFFFF;
}
.cursor {
    width: 2px;
    height: 32px;
    background-color: #FFFFFF;
    animation-name: blink;
    animation-duration: 1s;
    animation-iteration-count: infinite;
}
@keyframes blink {
    0% { opacity: 1; }
    50% { opacity: 0; }
    100% { opacity: 1; }
}
</style>
