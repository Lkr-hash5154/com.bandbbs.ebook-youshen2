<template>
	<div class="page" style="flex-direction: column;">
	  <div class="item">
		  <text style="font-size: 36px;font-weight:bold;color: white;width: 100%;text-align: center;">
			  {{inputPage}}
		  </text>
		  <text style="font-size: 24px;font-weight:bold;color: rgba(255, 255, 255, 0.6);width: 100%;text-align: center;">
			  共 {{totalChapters}} 章
		  </text>
	  </div>
	  <div class="row" style="top:209px">
		  <img src="/common/images/num_pad/7.png" @click="onClick('7')"/>
		  <img src="/common/images/num_pad/8.png" @click="onClick('8')"/>
		  <img src="/common/images/num_pad/9.png" @click="onClick('9')"/>
	  </div>
	  <div class="row" style="top:276px">
		  <img src="/common/images/num_pad/4.png" @click="onClick('4')"/>
		  <img src="/common/images/num_pad/5.png" @click="onClick('5')"/>
		  <img src="/common/images/num_pad/6.png" @click="onClick('6')"/>
	  </div>
	  <div class="row" style="top:343px">
		  <img src="/common/images/num_pad/1.png" @click="onClick('1')"/>
		  <img src="/common/images/num_pad/2.png" @click="onClick('2')"/>
		  <img src="/common/images/num_pad/3.png" @click="onClick('3')"/>
	  </div>
	  <div class="row" style="top:410px">
		  <img src="/common/images/num_pad/0.png" @click="onClick('0')"/>
		  <img src="/common/images/num_pad/del.png" @click="onClick('del')"/>
	  </div>
  
  
	  <img static src="/common/images/back.png" @click="back" style="position: absolute;left: 6px;top: 6px;width: 72px;height: 72px;"/>
	  <img static src="/common/images/conform.png" @click="onClick('conform')" style="position: absolute;left: 258px;top: 6px;width: 72px;height: 72px;"/>
	  <text style="position: absolute;left: 78px;top: 7px;width: 180px;line-height: 32px;font-weight:bold;font-size:24px;color:rgba(255,255,255,0.6);text-align:center;">
		{{nowTime}}
	  </text>
	  <text style="position: absolute;left: 78px;top: 35px;width: 180px;line-height: 42px;font-weight:bold;font-size:32px;color:white;text-align:center;">
		  跳转章节
	  </text>
	</div>
  </template>
  
  <script>
  import router from '@system.router'
  import prompt from '@system.prompt'
  import file from '@system.file'
  import bookStorage from '../../common/bookStorage.js'
  
  export default {
	private: {
	  inputPage: '0',
	  nowTime: "00:00",
	  timer: null,
	  allChapters: [],
	  totalChapters: 1
	},
	protected: {
		name: ''
	},
	updateTime() {
	  const date = new Date();
	  let hours = date.getHours();
	  let minutes = date.getMinutes();
  
	  hours = hours < 10 ? '0' + hours : hours;
	  minutes = minutes < 10 ? '0' + minutes : minutes;
  
	  this.nowTime = `${hours}:${minutes}`;
	},
	onInit() {
	  this.updateTime();
	  this.timer = setInterval(() => {
		this.updateTime();
	  }, 1000);
	  this.loadData();
	},
	async loadData() {
        const listUri = `internal://files/books/${this.name}/list.txt`;
        try {
            const listData = await new Promise((resolve, reject) => file.readText({ uri: listUri, success: resolve, fail: reject }));
            const lines = listData.text.split('\n').filter(Boolean);
            
            
            const chapterMap = new Map();
            for (const line of lines) {
                try {
                    const chapter = JSON.parse(line);
                    if (chapter.index !== null && chapter.index !== undefined) {
                        chapterMap.set(chapter.index, chapter);
                    }
                } catch (e) {
                    
                }
            }
            
            
            this.allChapters = Array.from(chapterMap.values()).sort((a, b) => a.index - b.index);
            this.totalChapters = this.allChapters.length;
        } catch (e) {
            this.allChapters = [];
            this.totalChapters = 0;
        }

		const progress = await bookStorage.get(this.name);
		if (progress.chapterIndex !== null) {
			const chapterArrayIndex = this.allChapters.findIndex(c => c.index === progress.chapterIndex);
			this.inputPage = (chapterArrayIndex + 1).toString();
		} else {
			this.inputPage = '1';
		}
	},
	onDestroy(){
		if (this.timer) {
			clearInterval(this.timer);
			this.timer = null;
		}
		this.allChapters = [];
	},
	async onClick(num){
	  if (num === 'del') {
		  if (this.inputPage.length > 1) {
			  this.inputPage = this.inputPage.slice(0, -1);
		  } else {
			  this.inputPage = '0';
		  }
		  return;
	  }
  
	  if (num === 'conform') {
		  let targetChapterNum = parseInt(this.inputPage);
		  if (isNaN(targetChapterNum) || targetChapterNum < 1) {
			  targetChapterNum = 1;
		  }
		  if (targetChapterNum > this.totalChapters) {
			  targetChapterNum = this.totalChapters;
		  }
		  if (this.totalChapters === 0) return;

		  const targetChapterIndex = this.allChapters[targetChapterNum - 1].index;
		  
		  try {
			  const progress = await bookStorage.get(this.name);
			  progress.chapterIndex = targetChapterIndex;
			  progress.offsetInChapter = 0;
			  progress.scrollOffset = 0;
			  await bookStorage.set(this.name, progress);
			  
			  prompt.showToast({ message: '设置成功', duration: 1000 });
			  globalThis.justJumpedFromPageNumber = true;
			  router.back();
		  } catch (e) {
			  prompt.showToast({ message: '设置失败', duration: 2000 });
		  }
		  return;
	  }
  
	  const currentVal = this.inputPage === '0' ? '' : this.inputPage;
	  const newValStr = currentVal + num;
	  const newVal = parseInt(newValStr);
  
	  if (newVal > this.totalChapters) {
		  prompt.showToast({ message: `最大章节为 ${this.totalChapters}`, duration: 1000 });
	  } else {
		  this.inputPage = newValStr;
	  }
	},
	back(){
		router.back();
	}
  }
  </script>
  
  <style>
  .page {
	  width: 336px;
	  height: 480px;
	  background-color: #000000;
  }
  
  .more-info {
	width: 335px;
	background-color: rgb(0,0,0);
  }
  
  .caltext {
	  width: 320px;
	  lines: 4;
	  text-overflow: clip;
	  font-size: 30px;
	  color: rgb(255,255,255);
	  text-align: left;
	  height: 160px;
  }
  
  .list {
	  width: 336px;
	  height: 400px;
	  position: absolute;
	  top:72px;
  }
  
  .item {
	  position: absolute;
	  left: 6px;
	  top: 86px;
	  width: 324px;
	  height: 115px;
	  border-radius: 36px;
	  flex-direction: column;
	  border: 3px solid #262626;
	  justify-content: center;
  }
  
  .itemtext {
	  font-size: 36px;
	  font-weight: bold;
	  height: 68px;
	  width: 102px;
	  color: white;
	  text-align: center;
	  text-overflow: ellipsis;
	  lines: 1;
	  padding: 10px;
	  margin-right: 9px;
	  background-color: #262626;
	  border-radius:12px;
  }
  
  .row {
	  position:absolute;
	  width:336px;
	  height:64px;
	  padding:0px 6px;
	  justify-content: space-between;
  }
  </style>
